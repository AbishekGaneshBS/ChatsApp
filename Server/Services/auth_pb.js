// source: auth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.ChatsApp.auth.CreateAccountRequest', null, global);
goog.exportSymbol('proto.ChatsApp.auth.CreateAccountResponse', null, global);
goog.exportSymbol('proto.ChatsApp.auth.LoginAccountRequest', null, global);
goog.exportSymbol('proto.ChatsApp.auth.LoginAccountResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatsApp.auth.CreateAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatsApp.auth.CreateAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatsApp.auth.CreateAccountRequest.displayName = 'proto.ChatsApp.auth.CreateAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatsApp.auth.LoginAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatsApp.auth.LoginAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatsApp.auth.LoginAccountRequest.displayName = 'proto.ChatsApp.auth.LoginAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatsApp.auth.CreateAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChatsApp.auth.CreateAccountResponse.repeatedFields_, null);
};
goog.inherits(proto.ChatsApp.auth.CreateAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatsApp.auth.CreateAccountResponse.displayName = 'proto.ChatsApp.auth.CreateAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatsApp.auth.LoginAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChatsApp.auth.LoginAccountResponse.repeatedFields_, null);
};
goog.inherits(proto.ChatsApp.auth.LoginAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ChatsApp.auth.LoginAccountResponse.displayName = 'proto.ChatsApp.auth.LoginAccountResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatsApp.auth.CreateAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatsApp.auth.CreateAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatsApp.auth.CreateAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatsApp.auth.CreateAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatsApp.auth.CreateAccountRequest}
 */
proto.ChatsApp.auth.CreateAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatsApp.auth.CreateAccountRequest;
  return proto.ChatsApp.auth.CreateAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatsApp.auth.CreateAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatsApp.auth.CreateAccountRequest}
 */
proto.ChatsApp.auth.CreateAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatsApp.auth.CreateAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatsApp.auth.CreateAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatsApp.auth.CreateAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatsApp.auth.CreateAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.ChatsApp.auth.CreateAccountRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatsApp.auth.CreateAccountRequest} returns this
 */
proto.ChatsApp.auth.CreateAccountRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string displayname = 2;
 * @return {string}
 */
proto.ChatsApp.auth.CreateAccountRequest.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatsApp.auth.CreateAccountRequest} returns this
 */
proto.ChatsApp.auth.CreateAccountRequest.prototype.setDisplayname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.ChatsApp.auth.CreateAccountRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatsApp.auth.CreateAccountRequest} returns this
 */
proto.ChatsApp.auth.CreateAccountRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatsApp.auth.LoginAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatsApp.auth.LoginAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatsApp.auth.LoginAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatsApp.auth.LoginAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatsApp.auth.LoginAccountRequest}
 */
proto.ChatsApp.auth.LoginAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatsApp.auth.LoginAccountRequest;
  return proto.ChatsApp.auth.LoginAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatsApp.auth.LoginAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatsApp.auth.LoginAccountRequest}
 */
proto.ChatsApp.auth.LoginAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatsApp.auth.LoginAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatsApp.auth.LoginAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatsApp.auth.LoginAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatsApp.auth.LoginAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.ChatsApp.auth.LoginAccountRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatsApp.auth.LoginAccountRequest} returns this
 */
proto.ChatsApp.auth.LoginAccountRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.ChatsApp.auth.LoginAccountRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatsApp.auth.LoginAccountRequest} returns this
 */
proto.ChatsApp.auth.LoginAccountRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChatsApp.auth.CreateAccountResponse.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatsApp.auth.CreateAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatsApp.auth.CreateAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatsApp.auth.CreateAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    myself: (f = msg.getMyself()) && common_pb.User.toObject(includeInstance, f),
    contactsList: jspb.Message.toObjectList(msg.getContactsList(),
    common_pb.User.toObject, includeInstance),
    url: jspb.Message.getFieldWithDefault(msg, 4, ""),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    common_pb.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatsApp.auth.CreateAccountResponse}
 */
proto.ChatsApp.auth.CreateAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatsApp.auth.CreateAccountResponse;
  return proto.ChatsApp.auth.CreateAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatsApp.auth.CreateAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatsApp.auth.CreateAccountResponse}
 */
proto.ChatsApp.auth.CreateAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ChatsApp.common.ResponseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new common_pb.User;
      reader.readMessage(value,common_pb.User.deserializeBinaryFromReader);
      msg.setMyself(value);
      break;
    case 3:
      var value = new common_pb.User;
      reader.readMessage(value,common_pb.User.deserializeBinaryFromReader);
      msg.addContacts(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = new common_pb.Group;
      reader.readMessage(value,common_pb.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatsApp.auth.CreateAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatsApp.auth.CreateAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatsApp.auth.CreateAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMyself();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getContactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      common_pb.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatsApp.common.ResponseStatus status = 1;
 * @return {!proto.ChatsApp.common.ResponseStatus}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.getStatus = function() {
  return /** @type {!proto.ChatsApp.common.ResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ChatsApp.common.ResponseStatus} value
 * @return {!proto.ChatsApp.auth.CreateAccountResponse} returns this
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChatsApp.common.User myself = 2;
 * @return {?proto.ChatsApp.common.User}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.getMyself = function() {
  return /** @type{?proto.ChatsApp.common.User} */ (
    jspb.Message.getWrapperField(this, common_pb.User, 2));
};


/**
 * @param {?proto.ChatsApp.common.User|undefined} value
 * @return {!proto.ChatsApp.auth.CreateAccountResponse} returns this
*/
proto.ChatsApp.auth.CreateAccountResponse.prototype.setMyself = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatsApp.auth.CreateAccountResponse} returns this
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.clearMyself = function() {
  return this.setMyself(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.hasMyself = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ChatsApp.common.User contacts = 3;
 * @return {!Array<!proto.ChatsApp.common.User>}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.getContactsList = function() {
  return /** @type{!Array<!proto.ChatsApp.common.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.User, 3));
};


/**
 * @param {!Array<!proto.ChatsApp.common.User>} value
 * @return {!proto.ChatsApp.auth.CreateAccountResponse} returns this
*/
proto.ChatsApp.auth.CreateAccountResponse.prototype.setContactsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ChatsApp.common.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatsApp.common.User}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.addContacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ChatsApp.common.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ChatsApp.auth.CreateAccountResponse} returns this
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.clearContactsList = function() {
  return this.setContactsList([]);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatsApp.auth.CreateAccountResponse} returns this
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated ChatsApp.common.Group groups = 5;
 * @return {!Array<!proto.ChatsApp.common.Group>}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.ChatsApp.common.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Group, 5));
};


/**
 * @param {!Array<!proto.ChatsApp.common.Group>} value
 * @return {!proto.ChatsApp.auth.CreateAccountResponse} returns this
*/
proto.ChatsApp.auth.CreateAccountResponse.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ChatsApp.common.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatsApp.common.Group}
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ChatsApp.common.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ChatsApp.auth.CreateAccountResponse} returns this
 */
proto.ChatsApp.auth.CreateAccountResponse.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChatsApp.auth.LoginAccountResponse.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatsApp.auth.LoginAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatsApp.auth.LoginAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatsApp.auth.LoginAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    myself: (f = msg.getMyself()) && common_pb.User.toObject(includeInstance, f),
    contactsList: jspb.Message.toObjectList(msg.getContactsList(),
    common_pb.User.toObject, includeInstance),
    url: jspb.Message.getFieldWithDefault(msg, 4, ""),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    common_pb.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatsApp.auth.LoginAccountResponse}
 */
proto.ChatsApp.auth.LoginAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatsApp.auth.LoginAccountResponse;
  return proto.ChatsApp.auth.LoginAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatsApp.auth.LoginAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatsApp.auth.LoginAccountResponse}
 */
proto.ChatsApp.auth.LoginAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ChatsApp.common.ResponseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new common_pb.User;
      reader.readMessage(value,common_pb.User.deserializeBinaryFromReader);
      msg.setMyself(value);
      break;
    case 3:
      var value = new common_pb.User;
      reader.readMessage(value,common_pb.User.deserializeBinaryFromReader);
      msg.addContacts(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = new common_pb.Group;
      reader.readMessage(value,common_pb.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatsApp.auth.LoginAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatsApp.auth.LoginAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatsApp.auth.LoginAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMyself();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getContactsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      common_pb.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatsApp.common.ResponseStatus status = 1;
 * @return {!proto.ChatsApp.common.ResponseStatus}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.getStatus = function() {
  return /** @type {!proto.ChatsApp.common.ResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ChatsApp.common.ResponseStatus} value
 * @return {!proto.ChatsApp.auth.LoginAccountResponse} returns this
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChatsApp.common.User myself = 2;
 * @return {?proto.ChatsApp.common.User}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.getMyself = function() {
  return /** @type{?proto.ChatsApp.common.User} */ (
    jspb.Message.getWrapperField(this, common_pb.User, 2));
};


/**
 * @param {?proto.ChatsApp.common.User|undefined} value
 * @return {!proto.ChatsApp.auth.LoginAccountResponse} returns this
*/
proto.ChatsApp.auth.LoginAccountResponse.prototype.setMyself = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ChatsApp.auth.LoginAccountResponse} returns this
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.clearMyself = function() {
  return this.setMyself(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.hasMyself = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ChatsApp.common.User contacts = 3;
 * @return {!Array<!proto.ChatsApp.common.User>}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.getContactsList = function() {
  return /** @type{!Array<!proto.ChatsApp.common.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.User, 3));
};


/**
 * @param {!Array<!proto.ChatsApp.common.User>} value
 * @return {!proto.ChatsApp.auth.LoginAccountResponse} returns this
*/
proto.ChatsApp.auth.LoginAccountResponse.prototype.setContactsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ChatsApp.common.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatsApp.common.User}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.addContacts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ChatsApp.common.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ChatsApp.auth.LoginAccountResponse} returns this
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.clearContactsList = function() {
  return this.setContactsList([]);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ChatsApp.auth.LoginAccountResponse} returns this
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated ChatsApp.common.Group groups = 5;
 * @return {!Array<!proto.ChatsApp.common.Group>}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.ChatsApp.common.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Group, 5));
};


/**
 * @param {!Array<!proto.ChatsApp.common.Group>} value
 * @return {!proto.ChatsApp.auth.LoginAccountResponse} returns this
*/
proto.ChatsApp.auth.LoginAccountResponse.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ChatsApp.common.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatsApp.common.Group}
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ChatsApp.common.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ChatsApp.auth.LoginAccountResponse} returns this
 */
proto.ChatsApp.auth.LoginAccountResponse.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


goog.object.extend(exports, proto.ChatsApp.auth);
