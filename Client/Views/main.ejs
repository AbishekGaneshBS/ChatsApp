<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatsApp</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="./Styles/dashboardstyle.css">
</head>
<body>
    <div class="whatsapp-container">
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="user-avatar">
                    <% if (user && user.displayName) { %>
                        <%= user.displayName.charAt(0).toUpperCase() %>
                    <% } else { %>
                        <i class="fas fa-user"></i>
                    <% } %>
                </div>
                <div>
                    <% if (user && user.displayName && user.userName) { %>
                        <h3><%= user.displayName %> (<%= user.userName %>)</h3>
                    <% } else { %>
                        <h3>Guest User</h3>
                    <% } %>
                </div>
                <div class="sidebar-icons">
                    <button class="logout-button" onclick="window.location.href='/logout'">Logout</button>
                </div>
            </div>
            <div class="chat-list">
                <!-- User Contacts -->
                <% contacts.forEach(contact => { %>
                    <div class="chat-item">
                        <div class="chat-avatar"><%= contact.displayName.charAt(0).toUpperCase() %></div>
                        <div class="chat-info">
                            <h3 class="contact-name">
                                <%= contact.displayName %>
                                <span class="status-indicator"></span>
                            </h3>
                            <p class="contact-username">@<%= contact.userName %></p>
                            <p class="online-status">Online</p>
                        </div>
                    </div>
                <% }); %>
                
                <!-- Group Chats -->
                <% groups.forEach(group => { %>
                    <div class="chat-item" data-group-id="<%= group.groupId %>" data-type="group">
                        <div class="chat-avatar"><i class="fas fa-users"></i></div>
                        <div>
                            <h3><%= group.groupName %></h3>
                            <p class="last-message-preview" data-id="<%= group.groupId %>" data-type="group"></p>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
        
        <div class="chat-area">
            <div class="no-chat-selected" id="noChatSelected">
                <i class="far fa-comment-dots"></i>
                <h2>ChatsApp</h2>
                <p>Select a chat to start messaging</p>
            </div>

            <div id="activeChat" style="display: none;">
                <div class="chat-header">
                    <div class="chat-avatar" id="chatAvatar"></div>
                    <div id="chatInfo">
                        <h3 id="chatName"></h3>
                        <p id="chatStatus"></p>
                    </div>
                </div>
                <div class="messages-container" id="messagesContainer"></div>
                <div class="message-input">
                    <input type="text" id="messageInput" placeholder="Type a message...">
                    <button id="sendButton"><i class="fas fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentChatId = null;
        let currentChatType = null; // 'user' or 'group'
        let messageStream = null;
        let userMessageStream = null;
        let groupMessageStream = null;

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            initializeChatSelection();
            initializeMessageStreams();
            setupMessageSending();
            loadLastMessagePreviews();
        });

        // Initialize chat selection
        function initializeChatSelection() {
            document.querySelectorAll('.chat-item').forEach(item => {
                item.addEventListener('click', () => {
                    const type = item.getAttribute('data-type');
                    const id = type === 'user' 
                        ? item.getAttribute('data-user-id') 
                        : item.getAttribute('data-group-id');
                    
                    loadChat(type, id, item);
                });
            });
        }

        // Initialize message streams
        function initializeMessageStreams() {
            // User message stream
            userMessageStream = new EventSource('/api/messages/user/stream');
            userMessageStream.onmessage = (event) => {
                const message = JSON.parse(event.data);
                updateLastMessagePreview(message.senderId, 'user', message.message);
                
                if (currentChatType === 'user' && currentChatId == message.senderId) {
                    addMessageToUI(message, false);
                }
            };

            // Group message stream
            groupMessageStream = new EventSource('/api/messages/group/stream');
            groupMessageStream.onmessage = (event) => {
                const message = JSON.parse(event.data);
                updateLastMessagePreview(message.groupId, 'group', message.message);
                
                if (currentChatType === 'group' && currentChatId == message.groupId) {
                    addMessageToUI(message, false);
                }
            };
        }

        // Load chat function
        async function loadChat(type, id, element) {
            currentChatType = type;
            currentChatId = id;
            
            // Update UI
            document.getElementById('noChatSelected').style.display = 'none';
            document.getElementById('activeChat').style.display = 'block';
            
            // Set chat header info
            if (type === 'user') {
                const name = element.querySelector('h3').textContent;
                document.getElementById('chatName').textContent = name;
                document.getElementById('chatAvatar').textContent = name.charAt(0).toUpperCase();
                document.getElementById('chatStatus').textContent = 'Online';
            } else {
                const name = element.querySelector('h3').textContent;
                document.getElementById('chatName').textContent = name;
                document.getElementById('chatAvatar').innerHTML = '<i class="fas fa-users"></i>';
                document.getElementById('chatStatus').textContent = `${element.querySelector('.last-message-preview').textContent || 'Group'}`;
            }

            // Load message history
            const endpoint = type === 'user' 
                ? `/api/messages/user/${id}`
                : `/api/messages/group/${id}`;
            
            try {
                const response = await fetch(endpoint);
                const data = await response.json();
                displayMessages(data.messages);
                
                // Focus input after loading
                document.getElementById('messageInput').focus();
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        // Setup message sending
        function setupMessageSending() {
            document.getElementById('sendButton').addEventListener('click', sendMessage);
            document.getElementById('messageInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') sendMessage();
            });
        }

        // Send message handler
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message || !currentChatId || !currentChatType) return;

            const endpoint = currentChatType === 'user'
                ? '/api/messages/user/send'
                : '/api/messages/group/send';
            
            const body = currentChatType === 'user'
                ? { recipientId: currentChatId, message }
                : { groupId: currentChatId, message };

            try {
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    const newMessage = {
                        senderId: '<%= user.userId %>',
                        senderName: '<%= user.userName %>',
                        message: message,
                        timestamp: result.timestamp,
                        isGroup: currentChatType === 'group',
                        groupId: currentChatType === 'group' ? currentChatId : null
                    };
                    
                    addMessageToUI(newMessage, true);
                    updateLastMessagePreview(currentChatId, currentChatType, message);
                    messageInput.value = '';
                }
            } catch (error) {
                console.error('Error sending message:', error);
            }
        }

        // Display messages in chat
        function displayMessages(messages) {
            const container = document.getElementById('messagesContainer');
            container.innerHTML = '';
            
            messages.forEach(msg => {
                addMessageToUI(msg, false);
            });
            
            // Scroll to bottom
            container.scrollTop = container.scrollHeight;
        }

        // Add message to UI
        function addMessageToUI(msg, isNew) {
            const container = document.getElementById('messagesContainer');
            const isMe = msg.senderId === '<%= user.userId %>';
            
            const messageElement = document.createElement('div');
            messageElement.className = `message ${isMe ? 'sent' : 'received'}`;
            
            const senderName = isMe ? 'You' : msg.senderName;
            const displayText = msg.isGroup && !isMe ? `${senderName}: ${msg.message}` : msg.message;
            
            messageElement.innerHTML = `
                <div class="message-content">
                    ${msg.isGroup && !isMe ? `<div class="message-sender">${senderName}</div>` : ''}
                    <div class="message-text">${displayText}</div>
                    <div class="message-time">
                        ${formatTime(msg.timestamp)}
                        ${isMe ? '<span class="message-status"><i class="fas fa-check-double"></i></span>' : ''}
                    </div>
                </div>
            `;
            
            container.appendChild(messageElement);
            
            if (isNew) {
                container.scrollTop = container.scrollHeight;
            }
        }

        // Load last message previews
        async function loadLastMessagePreviews() {
            // Load last messages for all contacts
            <% contacts.forEach(contact => { %>
                loadLastMessage('<%= contact.userId %>', 'user');
            <% }); %>
            
            // Load last messages for all groups
            <% groups.forEach(group => { %>
                loadLastMessage('<%= group.groupId %>', 'group');
            <% }); %>
        }

        async function loadLastMessage(id, type) {
            const endpoint = type === 'user'
                ? `/api/messages/user/${id}?limit=1`
                : `/api/messages/group/${id}?limit=1`;
            
            try {
                const response = await fetch(endpoint);
                const data = await response.json();
                
                if (data.messages && data.messages.length > 0) {
                    updateLastMessagePreview(id, type, data.messages[0].message);
                }
            } catch (error) {
                console.error('Error loading last message:', error);
            }
        }

        function updateLastMessagePreview(id, type, message) {
            const previewElement = document.querySelector(`.last-message-preview[data-id="${id}"][data-type="${type}"]`);
            if (previewElement) {
                previewElement.textContent = message.length > 30 
                    ? message.substring(0, 27) + '...' 
                    : message;
            }
        }

        // Helper function to format time
        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        }

        // Clean up when leaving page
        window.addEventListener('beforeunload', () => {
            if (userMessageStream) userMessageStream.close();
            if (groupMessageStream) groupMessageStream.close();
        });
    </script>
</body>
</html>